{"ts":1372256087527,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1372256152041,"patch":[[{"diffs":[[1,"var feedparser = require('feedparser')\n    , mongoose = require('mongoose')\n    , schema   = require('./schema');\n    \nmongoose.connect('mongodb://feedreader:feedreader@dharma.mongohq.com:10067/feedreaderdb');\nmongoose.connection.on('error', function(err){\n    console.error('error occurred');\n    throw err;\n});\n\nfunction FeedReader(){\n}\n\nFeedReader.test = function(){\n  console.log('aaa');  \n};\n\nFeedReader.read = function(){\n    feedparser.parseUrl('feeds.gawker.com/gizmodo/full',\n        function(error, meta, articles){\n            if(error) console.error(error);\n            else{\n                console.log('%s - %s - %s', meta.title, meta.link, meta.xmlUrl);\n                articles.forEach(function(article){\n                    console.log(\"%s - %s(%s)\", article.date, article.title, article.link);\n                });\n            }\n        });\n};\n\nFeedReader.save = function(name){\n    var db = mongoose.connection;\n    db.on('error', console.error.bind(console, 'connection error:'));\n    db.once('open', function(){\n        var Feed = mongoose.model('Feed');\n        var feed = new Feed({name: name});\n        feed.save(function(){\n            console.log('success');\n        });\n    });\n};\n\nFeedReader.load = function(callback){\n    console.log(\"Call Reader.load\");\n    var Feed = mongoose.model('Feed');\n    Feed.find(function(err, feeds){\n        if(err) throw err;\n        else\n            callback(feeds);\n    });\n};\n\nFeedReader.loadTags = function(callback){\n    console.log('/modules/reader.js:Call Reader.loadTags');\n    var Tag = mongoose.model('Tag');\n    Tag.find(function(err, tags){\n        if(err) throw err;\n        else\n            if(callback !== undefined) callback(tags);\n    });\n};\n\nFeedReader.loadFeedTags = function(feedId, callback){\n    console.log('/modules/reader.js:Call Reader.loadFeedTags');\n    var Feed = mongoose.model('Feed');\n    Feed.findOne({_id: new mongoose.Types.ObjectId(feedId)}, function(err, feed){\n        if(err) throw err;\n        else\n            if(callback !== undefined) callback(feed);\n    });\n};\n\nFeedReader.addTag = function(tagname, callback){\n    console.log('reader.js:Reader.addTag');\n    var Tag = mongoose.model('Tag');\n    var tag = new Tag({\n        name: tagname\n    });\n    \n    tag.save(function(err, t){\n        if(err) throw err;\n        else{\n            console.log('Success to save tag.');\n            if(callback !== undefined)\n                callback(t);\n        }\n    });\n};\n\nFeedReader.addFeed = function(url, callback){\n    feedparser.parseUrl(url,\n        function(error, meta, articles){\n            if(error) console.error(error);\n            else{\n                var Feed = mongoose.model('Feed');\n                var feed = new Feed({\n                    _id: new mongoose.Types.ObjectId,\n                    name: meta.title,\n                    link: meta.link,\n                    xmlUrl: meta.xmlUrl !== null ? meta.xmlUrl : url\n                });\n                \n                console.log('Add feed. %s - %s - %s', meta.title, meta.link, meta.xmlUrl);\n                \n                feed.save(function(err, f){\n                    if(err) throw err;\n                    else{\n                        console.log('Success to save feed.');\n                        callback(f, articles);\n                    }\n                });\n            }\n        });\n};\n\nFeedReader.addArticles = function(feed, articles, callback){\n    console.log('reader.js:Reader.addArticles:');\n    console.log('articles.length:%s', articles.length);\n    var arr = new Array();\n    var endCount = 0;\n    articles.forEach(function(article){\n        var Article = mongoose.model('Article');\n        var a = new Article({\n            feedId:         feed._id,\n            date:           article.date,\n            title:          article.title,\n            description:    article.description,\n            summary:        article.summary,\n            link:           article.link\n        });\n        \n        a.save(function(err, a){\n            if(err) throw err;\n            else{\n                arr.push(a);\n                endCount++;\n                if(endCount == articles.length)\n                    if(callback !== undefined)\n                        callback(arr);\n            }\n        });\n    });\n};\n\nFeedReader.getFeedArticles = function(feedId, limit, callback){\n    console.log('reader.js:Reader.getFeedArticles:feedId=%s', feedId);\n    if('number' != typeof limit){\n        limit = 30;\n    }\n    var Article = mongoose.model('Article');\n    Article.find({feedId: new mongoose.Types.ObjectId(feedId)})\n            .sort({date: 'desc'})\n            .limit(limit)\n            .exec(callback);\n};\n\nFeedReader.getFeedsArticles = function(feedIds, limit, callback){\n    console.log('reader.js:Reader.getFeedArticles:feedIds=%s', feedIds);\n    if('number' != typeof limit){\n        limit = 30;\n    }\n    \n    var arr = new Array();\n    for(var i=0; i<feedIds.length; i++){\n        arr.push(feedIds[i]);\n    }\n    \n    var Article = mongoose.model('Article');\n    Article.find({feedId: {$in: arr} })\n            .sort({date: 'desc'})\n            .limit(limit)\n            .exec(function(err, articles){\n                if(err) throw err;\n                else\n                    if(callback !== undefined) callback(articles);\n            });\n};\n\nFeedReader.getNewArticles = function(feedId, callback){\n    var Feed = mongoose.model('Feed');\n    Feed.findById(new mongoose.Types.ObjectId(feedId), function(err, feed){\n        if(err) throw err;\n        else{\n            if(feed.xmlUrl !== null)\n                feedparser.parseUrl(feed.xmlUrl, function(err, meta, articles){\n                    callback(err, meta, articles, feed);\n                });\n        }\n    });\n};\n\nFeedReader.updateFeedTags = function(feedId, feedTags, callback){\n    var tags = new Array();\n    for(var i=0; i<feedTags.length; i++){\n        var t = feedTags[i];\n        tags.push(t._id);\n    }\n    var Feed = mongoose.model('Feed');\n    Feed.update(\n        {_id: new mongoose.Types.ObjectId(feedId)},\n        {feedTags: tags},\n        {safe: true},\n        function(err, numberAffected, raw){\n            if(err) throw err;\n            else\n               if(callback !== undefined) callback();\n        });\n};\n\nFeedReader.getTaggedFeeds = function(tagId, callback){\n    var Feed = mongoose.model('Feed');\n    Feed.find({feedTags: {$in: [new mongoose.Types.ObjectId(tagId)]}}, function(err, feeds){\n        if(err) throw err;\n        else\n            if(callback !== undefined) callback(feeds);\n    });\n};\n\nexports = module.exports = FeedReader;"]],"start1":0,"start2":0,"length1":0,"length2":6607}]],"length":6607,"saved":false}
{"ts":1372257425691,"patch":[[{"diffs":[[0,"\n}\n\n"],[-1,"FeedReader.test = function(){\n  console.log('aaa');  \n};\n\n"],[0,"Feed"]],"start1":336,"start2":336,"length1":66,"length2":8}]],"length":6549,"saved":false}
{"contributors":[],"silentsave":false,"ts":1372318417707,"patch":[[{"diffs":[[0,"dparser "],[1,"     "],[0,"= requir"]],"start1":7,"start2":7,"length1":16,"length2":21},{"diffs":[[0,"ongoose "],[1,"     "],[0,"= requir"]],"start1":51,"start2":51,"length1":16,"length2":21},{"diffs":[[0,"chema   "],[1,"     "],[0,"= requir"]],"start1":93,"start2":93,"length1":16,"length2":21},{"diffs":[[0,"schema')"],[1,"\n    , resourceUri   = \"\""],[0,";\n    \nm"]],"start1":119,"start2":119,"length1":16,"length2":41}]],"length":6589,"saved":false}
{"ts":1372318462871,"patch":[[{"diffs":[[0,"   = \"\";"],[1,"\n\nif ('development' == app.get('env')) {\n  app.use(express.errorHandler());\n}"],[0,"\n    \nmo"]],"start1":145,"start2":145,"length1":16,"length2":93}]],"length":6666,"saved":false}
{"ts":1372318567224,"patch":[[{"diffs":[[0,"chema')\n"],[1,"    , app           = require('../app')\n"],[0,"    , re"]],"start1":120,"start2":120,"length1":16,"length2":56}]],"length":6706,"saved":false}
{"ts":1372318593059,"patch":[[{"diffs":[[0,"ler());\n"],[1,"}else{\n    resourceUri = 'mongodb://feedreader:feedreader@dharma.mongohq.com:10067/feedreaderdb';\n"],[0,"}\n    \nm"]],"start1":261,"start2":261,"length1":16,"length2":114}]],"length":6804,"saved":false}
{"ts":1372318670875,"patch":[[{"diffs":[[0,"{\n  "],[-1,"app.use(express.errorHandler())"],[1,"  resourcrUri = 'mongodb://localhost/feedreaderdb'"],[0,";\n}e"]],"start1":232,"start2":232,"length1":39,"length2":58}]],"length":6823,"saved":false}
{"ts":1372318686275,"patch":[[{"diffs":[[0," resourc"],[-1,"r"],[1,"e"],[0,"Uri = 'm"]],"start1":237,"start2":237,"length1":17,"length2":17},{"diffs":[[0,"ect("],[-1,"'mongodb://feedreader:feedreader@dharma.mongohq.com:10067/feedreaderdb'"],[1,"resourceUri"],[0,");\nm"]],"start1":406,"start2":406,"length1":79,"length2":19}]],"length":6763,"saved":false}
{"contributors":[],"silentsave":false,"ts":1372328607917,"patch":[[{"diffs":[[-1,"var feedparser      = require('feedparser')\n    , mongoose      = require('mongoose')\n    , schema        = require('./schema')\n    , app           = require('../app')\n    , resourceUri   = \"\";\n\nif ('development' == app.get('env')) {\n    resourceUri = 'mongodb://localhost/feedreaderdb';\n}else{\n    resourceUri = 'mongodb://feedreader:feedreader@dharma.mongohq.com:10067/feedreaderdb';\n}\n    \nmongoose.connect(resourceUri);\nmongoose.connection.on('error', function(err){\n    console.error('error occurred');\n    throw err;\n});\n\nfunction FeedReader(){\n}\n\nFeedReader.read = function(){\n    feedparser.parseUrl('feeds.gawker.com/gizmodo/full',\n        function(error, meta, articles){\n            if(error) console.error(error);\n            else{\n                console.log('%s - %s - %s', meta.title, meta.link, meta.xmlUrl);\n                articles.forEach(function(article){\n                    console.log(\"%s - %s(%s)\", article.date, article.title, article.link);\n                });\n            }\n        });\n};\n\nFeedReader.save = function(name){\n    var db = mongoose.connection;\n    db.on('error', console.error.bind(console, 'connection error:'));\n    db.once('open', function(){\n        var Feed = mongoose.model('Feed');\n        var feed = new Feed({name: name});\n        feed.save(function(){\n            console.log('success');\n        });\n    });\n};\n\nFeedReader.load = function(callback){\n    console.log(\"Call Reader.load\");\n    var Feed = mongoose.model('Feed');\n    Feed.find(function(err, feeds){\n        if(err) throw err;\n        else\n            callback(feeds);\n    });\n};\n\nFeedReader.loadTags = function(callback){\n    console.log('/modules/reader.js:Call Reader.loadTags');\n    var Tag = mongoose.model('Tag');\n    Tag.find(function(err, tags){\n        if(err) throw err;\n        else\n            if(callback !== undefined) callback(tags);\n    });\n};\n\nFeedReader.loadFeedTags = function(feedId, callback){\n    console.log('/modules/reader.js:Call Reader.loadFeedTags');\n    var Feed = mongoose.model('Feed');\n    Feed.findOne({_id: new mongoose.Types.ObjectId(feedId)}, function(err, feed){\n        if(err) throw err;\n        else\n            if(callback !== undefined) callback(feed);\n    });\n};\n\nFeedReader.addTag = function(tagname, callback){\n    console.log('reader.js:Reader.addTag');\n    var Tag = mongoose.model('Tag');\n    var tag = new Tag({\n        name: tagname\n    });\n    \n    tag.save(function(err, t){\n        if(err) throw err;\n        else{\n            console.log('Success to save tag.');\n            if(callback !== undefined)\n                callback(t);\n        }\n    });\n};\n\nFeedReader.addFeed = function(url, callback){\n    feedparser.parseUrl(url,\n        function(error, meta, articles){\n            if(error) console.error(error);\n            else{\n                var Feed = mongoose.model('Feed');\n                var feed = new Feed({\n                    _id: new mongoose.Types.ObjectId,\n                    name: meta.title,\n                    link: meta.link,\n                    xmlUrl: meta.xmlUrl !== null ? meta.xmlUrl : url\n                });\n                \n                console.log('Add feed. %s - %s - %s', meta.title, meta.link, meta.xmlUrl);\n                \n                feed.save(function(err, f){\n                    if(err) throw err;\n                    else{\n                        console.log('Success to save feed.');\n                        callback(f, articles);\n                    }\n                });\n            }\n        });\n};\n\nFeedReader.addArticles = function(feed, articles, callback){\n    console.log('reader.js:Reader.addArticles:');\n    console.log('articles.length:%s', articles.length);\n    var arr = new Array();\n    var endCount = 0;\n    articles.forEach(function(article){\n        var Article = mongoose.model('Article');\n        var a = new Article({\n            feedId:         feed._id,\n            date:           article.date,\n            title:          article.title,\n            description:    article.description,\n            summary:        article.summary,\n            link:           article.link\n        });\n        \n        a.save(function(err, a){\n            if(err) throw err;\n            else{\n                arr.push(a);\n                endCount++;\n                if(endCount == articles.length)\n                    if(callback !== undefined)\n                        callback(arr);\n            }\n        });\n    });\n};\n\nFeedReader.getFeedArticles = function(feedId, limit, callback){\n    console.log('reader.js:Reader.getFeedArticles:feedId=%s', feedId);\n    if('number' != typeof limit){\n        limit = 30;\n    }\n    var Article = mongoose.model('Article');\n    Article.find({feedId: new mongoose.Types.ObjectId(feedId)})\n            .sort({date: 'desc'})\n            .limit(limit)\n            .exec(callback);\n};\n\nFeedReader.getFeedsArticles = function(feedIds, limit, callback){\n    console.log('reader.js:Reader.getFeedArticles:feedIds=%s', feedIds);\n    if('number' != typeof limit){\n        limit = 30;\n    }\n    \n    var arr = new Array();\n    for(var i=0; i<feedIds.length; i++){\n        arr.push(feedIds[i]);\n    }\n    \n    var Article = mongoose.model('Article');\n    Article.find({feedId: {$in: arr} })\n            .sort({date: 'desc'})\n            .limit(limit)\n            .exec(function(err, articles){\n                if(err) throw err;\n                else\n                    if(callback !== undefined) callback(articles);\n            });\n};\n\nFeedReader.getNewArticles = function(feedId, callback){\n    var Feed = mongoose.model('Feed');\n    Feed.findById(new mongoose.Types.ObjectId(feedId), function(err, feed){\n        if(err) throw err;\n        else{\n            if(feed.xmlUrl !== null)\n                feedparser.parseUrl(feed.xmlUrl, function(err, meta, articles){\n                    callback(err, meta, articles, feed);\n                });\n        }\n    });\n};\n\nFeedReader.updateFeedTags = function(feedId, feedTags, callback){\n    var tags = new Array();\n    for(var i=0; i<feedTags.length; i++){\n        var t = feedTags[i];\n        tags.push(t._id);\n    }\n    var Feed = mongoose.model('Feed');\n    Feed.update(\n        {_id: new mongoose.Types.ObjectId(feedId)},\n        {feedTags: tags},\n        {safe: true},\n        function(err, numberAffected, raw){\n            if(err) throw err;\n            else\n               if(callback !== undefined) callback();\n        });\n};\n\nFeedReader.getTaggedFeeds = function(tagId, callback){\n    var Feed = mongoose.model('Feed');\n    Feed.find({feedTags: {$in: [new mongoose.Types.ObjectId(tagId)]}}, function(err, feeds){\n        if(err) throw err;\n        else\n            if(callback !== undefined) callback(feeds);\n    });\n};"],[1,"function FeedReader(){\n}"],[0,"\n\nex"]],"start1":0,"start2":0,"length1":6727,"length2":28}]],"length":64,"saved":false}
{"ts":1372328648383,"patch":[[{"diffs":[[0,"r(){\n}\n\n"],[1,"FeedReader.prototype.test = function(){\n    console.log('sss');\n};\n\n"],[0,"exports "]],"start1":18,"start2":18,"length1":16,"length2":84}]],"length":132,"saved":false}
{"contributors":[],"silentsave":false,"ts":1372328981441,"patch":[[{"diffs":[[-1,"function FeedReader"],[1,"var FeedParser = function"],[0,"(){"],[-1,"\n"],[0,"}"],[1,";"],[0,"\n\nFe"]],"start1":0,"start2":0,"length1":28,"length2":34}]],"length":138,"saved":false}
{"ts":1372328986850,"patch":[[{"diffs":[[0,"Feed"],[-1,"Pars"],[1,"Read"],[0,"er ="]],"start1":4,"start2":4,"length1":12,"length2":12}]],"length":138,"saved":false}
{"ts":1372329116727,"patch":[[{"diffs":[[0,"type"],[-1,"."],[1," = {\n    "],[0,"test"],[-1," ="],[1,":"],[0," fun"]],"start1":48,"start2":48,"length1":15,"length2":22},{"diffs":[[0,"tion(){\n"],[1,"    "],[0,"    cons"]],"start1":71,"start2":71,"length1":16,"length2":20},{"diffs":[[0,"'sss"],[-1,"');"],[1,"ss')\n    }"],[0,"\n};\n"]],"start1":99,"start2":99,"length1":11,"length2":18}]],"length":156,"saved":false}
{"ts":1372329185513,"patch":[[{"diffs":[[0,"n(){};\n\n"],[1,"exports = module.exports = FeedReader;\n\n"],[0,"FeedRead"]],"start1":24,"start2":24,"length1":16,"length2":56},{"diffs":[[0,"};\n\n"],[-1,"exports = module.exports = FeedReader;"]],"start1":154,"start2":154,"length1":42,"length2":4}]],"length":158,"saved":false}
{"ts":1372329249674,"patch":[[{"diffs":[[0,"};\n\n"],[-1,"exports = module.exports = FeedReader;\n\nFeedReader.prototype = {\n    "],[1,"\nFeedReader."],[0,"test"],[-1,":"],[1," ="],[0," fun"]],"start1":28,"start2":28,"length1":82,"length2":26},{"diffs":[[0,"\n   "],[-1,"     console.log('sssss')\n    }\n}"],[1,"\n};\n\nexports = module.exports = FeedReader"],[0,";\n"],[-1,"\n"]],"start1":62,"start2":62,"length1":40,"length2":48}]],"length":110,"saved":false}
{"ts":1372329258010,"patch":[[{"diffs":[[0,"n(){\n   "],[1," console.log('ssssss');"],[0,"\n};\n\nexp"]],"start1":58,"start2":58,"length1":16,"length2":39}]],"length":133,"saved":false}
{"ts":1372329422771,"patch":[[{"diffs":[[-1,"var"],[1,"function"],[0," Fee"]],"start1":0,"start2":0,"length1":7,"length2":12},{"diffs":[[0,"ader"],[-1," = function"],[0,"(){}"],[-1,";"],[0,"\n\n\nF"]],"start1":15,"start2":15,"length1":24,"length2":12},{"diffs":[[0,"');\n};\n\n"],[1,"var Feed = function(){}\n\n"],[0,"exports "]],"start1":79,"start2":79,"length1":16,"length2":41}]],"length":151,"saved":false}
{"ts":1372329432460,"patch":[[{"diffs":[[0,"};\n\n"],[-1,"var Feed = "],[0,"function"],[1," Feed"],[0,"(){}"]],"start1":83,"start2":83,"length1":27,"length2":21}]],"length":145,"saved":false}
{"ts":1372329444622,"patch":[[{"diffs":[[0,"er(){}\n\n"],[-1,"\n"],[0,"FeedRead"]],"start1":17,"start2":17,"length1":17,"length2":16},{"diffs":[[0,"');\n};\n\n"],[1,"/////////////////////////////////////////////////\n\n\n\n\n"],[0,"function"]],"start1":78,"start2":78,"length1":16,"length2":70},{"diffs":[[0,"ed(){}\n\n"],[1,"\n\n\n"],[0,"exports "]],"start1":151,"start2":151,"length1":16,"length2":19}]],"length":201,"saved":false}
{"ts":1372329465641,"patch":[[{"diffs":[[0,"//////\n\n"],[-1,"\n\n\n"],[0,"function"]],"start1":129,"start2":129,"length1":19,"length2":16},{"diffs":[[0,"ed(){}\n\n"],[1,"Feed.add = function(){\n    \n};\n\n"],[0,"\n\n\nexpor"]],"start1":148,"start2":148,"length1":16,"length2":48}]],"length":230,"saved":false}
{"ts":1372329636491,"patch":[[{"diffs":[[1,"var Feed = require('./objects/feed')\n;\n\n"],[0,"function FeedReader("]],"start1":0,"start2":0,"length1":20,"length2":60},{"diffs":[[0,"};\n\n"],[-1,"/////////////////////////////////////////////////\n\nfunction Feed(){}\n\nFeed.add = function(){\n    \n};"],[0,"\n\n\n\n"]],"start1":122,"start2":122,"length1":108,"length2":8}]],"length":170,"saved":false}
{"ts":1372329698814,"patch":[[{"diffs":[[0,"eader(){"],[1,"\n    this.Feed = Feed;\n"],[0,"}\n\nFeedR"]],"start1":54,"start2":54,"length1":16,"length2":39}]],"length":193,"saved":false}
{"ts":1372329719273,"patch":[[{"diffs":[[0,"   this."],[-1,"F"],[1,"f"],[0,"eed = Fe"]],"start1":64,"start2":64,"length1":17,"length2":17}]],"length":193,"saved":false}
{"ts":1372329796962,"patch":[[{"diffs":[[0,"eed;\n}\n\n"],[1,"Feedreader.feed = Feed;\n\n"],[0,"FeedRead"]],"start1":80,"start2":80,"length1":16,"length2":41}]],"length":218,"saved":false}
{"ts":1372329800809,"patch":[[{"diffs":[[0,"(){\n"],[-1,"    this.feed = Feed;\n"],[0,"}\n\nF"]],"start1":59,"start2":59,"length1":30,"length2":8}]],"length":196,"saved":false}
{"ts":1372329805286,"patch":[[{"diffs":[[0,"\n}\n\nFeed"],[-1,"r"],[1,"R"],[0,"eader.fe"]],"start1":62,"start2":62,"length1":17,"length2":17}]],"length":196,"saved":false}
